name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: get-version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF##*/}
          else
            echo "This workflow requires a valid tag (e.g., v0.1.0) to run."
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build and push multi-platform Docker image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64,linux/arm/v7 \
            --build-arg VERSION=${{ env.VERSION }} \
            --tag noahh99/hermes:latest \
            --tag noahh99/hermes:${{ env.VERSION }} \
            --push .

  redeploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: List Running Tasks
        id: list-tasks
        run: |
          TASKS=$(aws ecs list-tasks \
          --cluster ${{ secrets.AWS_CLUSTER_NAME }} \
          --service-name ${{ secrets.AWS_SERVICE_NAME }} \
          --query "taskArns[]" \
          --output text)
          echo "TASKS=$TASKS"
          echo "tasks=$TASKS" >> $GITHUB_ENV

      - name: Stop Running Tasks
        if: env.tasks
        run: |
          for TASK in $tasks; do
            echo "Stopping task $TASK..."
            aws ecs stop-task \
              --cluster ${{ secrets.AWS_CLUSTER_NAME }} \
              --task $TASK
          done

      - name: Restart ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.AWS_CLUSTER_NAME }} \
            --service ${{ secrets.AWS_SERVICE_NAME }} \
            --force-new-deployment
